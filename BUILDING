-------------------------------------------------------------------------------

                            BUILD INSTRUCTIONS

This package is built using CMake.

CMake is an open-source, cross-platform family of tools designed to build,
test and package software. CMake is used to control the software compilation
process using simple platform and compiler independent configuration files,
and generate native makefiles and workspaces that can be used in the compiler
environment of your choice.

If you are already familiar with GNU autoconf tools, CMake basically replaces
the "autogen.sh" and "configure" steps with a portable, platform independent
way of creating makefiles that can be used to build your project/package with.

CMake can be downloaded and installed from:


    https://cmake.org/


-------------------------------------------------------------------------------

                               DECNUMBER

The decNumber project is hosted on GitHub at the following URL:


    https://github.com/hercules-390/decNumber-icu-368.git


You can either clone the git repository (recommended) or download the source
code .zip file from github.  (click the green "Clone or download" button and
select "Download")

Once downloaded, create a build directory (*outside* the source/repostiory
directory) where the build will take place, called:


    xxxxxxxxAA.yyyyyyy


where "xxxxxxxx" is the name of the project/package (e.g. "decNumber"), "AA"
is the build architecture ("32" or "64") and "yyyyyyy" is the configuration
type ("Debug" or "Release"):


    mkdir  decNumber32.Debug
    mkdir  decNumber32.Release
    mkdir  decNumber64.Debug
    mkdir  decNumber64.Release


On Windows, "xxxxxxxxAA" will be used for the INSTALL_PREFIX (the name of
the directory where the package will be installed to (target of make install).
On Linux, the default INSTALL_PREFIX is /usr/local.  Either can be overridden
by specifying the "-D INSTALL_PREFIX=instdir" option on your cmake command.

Once the binary/build directory is created, to build and install the package
into the specified installation directory, simply use the commands:


  (Windows)

    > mkdir <build-dir>
    > cd <build-dir>
    > vstools [32|64]
    > cmake -G "NMake Makefiles" srcdir
    > nmake
    > nmake install


  (Linux)

    $ mkdir <build-dir>
    $ cd <build-dir>
    $ cmake srcdir
    $ make
    # sudo make install


Where "srcdir" is the package's source (repository) directory, where the
"CMakeLists.txt" file exists.

The "vstools.cmd" batch file (Windows only) initializes the proper Microsoft
Visual C/C++ build environment for the chosen build architecture (32 bit or
64 bit) and must be issued before the cmake and nmake commands.

To override the default installation directory use the -D INSTALL_PREFIX=xxx
cmake option:


  (Windows)

    > cmake -G "NMake Makefiles"  -D INSTALL_PREFIX=dirpath  srcdir


  (Linux)

    $ cmake  -D INSTALL_PREFIX=dirpath  srcdir


Surround "INSTALL_PREFIX=dirpath" with double quotes if it contains blanks.

-------------------------------------------------------------------------------

                                CLANG

To build on Linux platforms using clang instead of gcc, simply export the
CC and CXX flags before invoking CMake:


    $ export CC=clang
    $ export CXX=clang++
    $ cmake srcdir


If clang/clang++ is not in your $PATH, then you will need to specify its
full path in the CC/CXX export commands.

-------------------------------------------------------------------------------

                              BUILD.CMD

On Windows, to make things REALLY SIMPLE, you can instead use the provided
"build.cmd" script which performs the complete build for you automatically
by creating the build directory and automatically invoking each command:


    build  -i srcdir


Enter "build /?" or "build --help" for more information.

-------------------------------------------------------------------------------

                                BUILD

On Linux, to make things REALLY SIMPLE, you can instead use the provided
"build" bash script which performs the complete build for you automatically
by creating the build directory and automatically invoking each command:


    build  -i srcdir


Enter "build -h" or "build --help" for more information.

-------------------------------------------------------------------------------
